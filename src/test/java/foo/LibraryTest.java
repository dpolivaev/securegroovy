package foo;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;

import java.util.concurrent.Callable;

import org.junit.Test;

import net.bytebuddy.ByteBuddy;
import net.bytebuddy.dynamic.ClassFileLocator;
import net.bytebuddy.implementation.MethodDelegation;
import net.bytebuddy.implementation.bind.annotation.Argument;
import net.bytebuddy.implementation.bind.annotation.FieldValue;
import net.bytebuddy.implementation.bind.annotation.SuperCall;
import net.bytebuddy.matcher.ElementMatchers;
import net.bytebuddy.pool.TypePool;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'Dimitry' at '01.04.17 12:42' with Gradle 2.7
 *
 * @author Dimitry, @date 01.04.17 12:42
 */
public class LibraryTest {
    @Test 
    public void addsField() throws Exception {
    	final ClassLoader classLoader = LibraryTest.class.getClassLoader();
        TypePool typePool = TypePool.Default.of(classLoader);
		new ByteBuddy()
          .rebase(typePool.describe("foo.Bar").resolve(), // do not use 'Bar.class'
                    ClassFileLocator.ForClassLoader.of(classLoader))
          .method(ElementMatchers.named("toString")).intercept(MethodDelegation.to(BarInterceptor.class))
          .defineField("qux", String.class) // we learn more about defining fields later
          .make()
          .load(classLoader);
        assertThat(Bar.class.getDeclaredField("qux"), notNullValue());
        assertThat(Bar.class.getDeclaredField("string"), notNullValue());
        final Bar bar = new Bar();
		assertThat(bar.toString(), equalTo("456123"));
		assertThat(bar.toString(10), equalTo("45612310"));
    }
}


class BarInterceptor{
	public static String intercept(@SuperCall Callable<String> c, @FieldValue("string2") String v){
		try {
			return v + c.call();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public static String intercept(@SuperCall Callable<String> c, @FieldValue("string2") String v, @Argument(0) int i){
		try {
			return v + c.call() + i;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}

class Bar {
	private String string = "123";
	private String string2 = "456";

	public String toString(int i) {
		return string;
	}

	public String toString() {
		return string;
	}
	
}